# -*- coding: utf-8 -*-
"""Project_ProbStats_D.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oU2QXz_u-Q1p4aLrIjgLzp6Fq4DfesV_

**Question D**: For this task, sum up the daily stats (cases and deaths) from both states. Assume day 1 is June 1st 2020. Assume the combined daily deaths are Poisson distributed with parameter λ. Assume an Exponential prior (with mean β) on λ. Assume β = λMME where the MME is found using the first four weeks data (so the first 28 days of June 2020) as the sample data. Now, use the fifth week’s data (June 29 to July 5) to obtain the posterior for λ via Bayesian inference. Then, use sixth week’s data to obtain the new posterior, using prior as posterior after week 5. Repeat till the end of week 8 (that is, repeat till you have posterior after using 8th week’s data). Plot all posterior distributions on one graph. Report the MAP for all posteriors.
"""

import pandas as pd
import numpy as np
from scipy.stats import gamma
import matplotlib.pyplot as  plt

# Commented out IPython magic to ensure Python compatibility.
# %cd D:\StonyBrook\Study\Prob&Stats CSE544\Project

# from google.colab import drive
# drive.mount('/content/gdrive')

# %cd /content/gdrive/My Drive/Prob_stats_proj

data = pd.read_csv('7.csv')

## converting date column to datetime data type ##
data['Date'] = pd.to_datetime(data['Date'])

data

data.info()

#### June - July 2020 data ######

june_start_date, june_end_date = '2020-06-01' , '2020-06-28' # 28 days only
posterior_week_start_date, posterior_week_end_date = '2020-06-29' , '2020-07-05'

condition = (data['Date'] >= june_start_date) & (data['Date'] <= june_end_date)
june_28_data = data.loc[condition] 

condition = (data['Date'] >= posterior_week_start_date) & (data['Date'] <= posterior_week_end_date)
posterior_week_data = data.loc[condition]

##### summing up deaths data #####
handle_state_1 = 'IA deaths'
handle_state_2 = 'ID deaths'

june_28_data = june_28_data[handle_state_1] + june_28_data[handle_state_2]

posterior_week_data_ = posterior_week_data[handle_state_1] + posterior_week_data[handle_state_2]

"""#Bayesian Inference

Procedure: We calculated lambda value using MME for Poisson distribution for first 28 days of data. Using this lambda we calculated beta as 1/lambda and subsituted this in the prior. Next when finding the posterior, the distribution comes out as gamma where in every loop we ffind the powers of exponential and lambda and store it in table. Next we plotted the gamma distribution with MAP = alpha/beta
"""

def MME_Poisson(X):
    estimate = np.mean(X)
    return estimate
 
def get_estimates(exp_a, lambda_a, exp_b, lambda_b):
    return exp_a + exp_b, lambda_a + lambda_b

def plot_gamma(table):
    for estimate in table:
        alpha, beta = estimate[0], estimate[1]
        x = np.linspace(gamma.ppf(0.01, alpha, scale=1/beta),gamma.ppf(0.99, alpha,scale = 1/beta), 100)
        MAP = (alpha)/beta
        plt.plot(x, gamma.pdf(x, alpha,scale=1/beta), label = 'MAP: %.4f ' %(MAP))
        plt.xlabel('x')
        plt.ylabel('pdf')
    plt.legend(loc="upper right")
    plt.title('Gamma curves of estimates')
    plt.show()

# Assuming it to be poisson distributed 

# Obtaining MME 

lambda_ = MME_Poisson(june_28_data)

print(' MME of poisson distributed data ', lambda_)

# prior beta 
exp_lambda = 1/lambda_ 

print(' Prior beta value ', exp_lambda)

## Since the prior is exponential and likelihood is poisson, the posterior is gamma distributed

likelihood_exp_power = len(posterior_week_data_)
likelihood_lambda_power = np.sum(posterior_week_data_)  
prior_exp_power = exp_lambda
prior_lambda_power = 0

table = []
for i in range(4): # till 8th week 
    prior_exp_power, prior_lambda_power = get_estimates(likelihood_exp_power, likelihood_lambda_power, prior_exp_power , prior_lambda_power)
    table.append([prior_lambda_power + 1,prior_exp_power])
    
    condition+=7
    posterior_week_data = data[166 + 7*i : 173 + 7*i]

    posterior_week_data_ = posterior_week_data[handle_state_1] + posterior_week_data[handle_state_2]

    likelihood_exp_power = len(posterior_week_data_)
    likelihood_lambda_power = np.sum(posterior_week_data_)

print(table)

plot_gamma(table)