# -*- coding: utf-8 -*-
"""Project_ProbStats_A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19zaLyKuTM5wZShiZLudC_CxAkzQteGy9
"""

import pandas as pd
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
# %cd D:\StonyBrook\Study\Prob&Stats CSE544\Project

# from google.colab import drive
# drive.mount('/content/gdrive')

# %cd /content/gdrive/My Drive/Prob_stats_proj

"""#Data Preprocessing"""

data = pd.read_csv('7.csv')

## converting date column to datetime data type ##
data['Date'] = pd.to_datetime(data['Date'])

data

"""###Data features
Following list displays the features in our data
 
"""

data.info()

def generate_data(p,data):
    X, Y = [], []
    for i in range(len(data) - p):
        X.append([1] + data[i:i+p].tolist())  # appending 1 for beta_0
    
    Y = data[p:].tolist()

    return np.array(X),np.array(Y)

def SSE(y_pred, y_true):
    A = y_true - y_pred
    A = A*A
    return sum(A)

def MSE(y_pred,y_true):
    return SSE(y_pred,y_true)/len(y_pred)

def MAPE(y_pred, y_true):
    A = np.abs(y_true - y_pred)
    A = np.sum(np.divide(A, y_true))*100
    return A/len(y_pred)

def AutoRegression(p, data):
    X, Y = generate_data(p, data)
    A = np.linalg.inv(np.matmul(np.transpose(X), X))
    B = np.matmul(np.transpose(X), Y)
    beta = np.matmul(A,B)
    
    return beta

def Predict_AR(data, beta):
    p = len(beta) - 1 
    data = data.to_numpy()
    for i in range(7):
        y_pred = beta[0] + np.matmul(data[-p:].T, beta[1:])
        data = np.append(data,y_pred)
    
    return data

###### Outlier Detection Using Tukey's Rule ########
## Plot data ####

###### Getting August 2020 data ######
start_date, end_date = '2020-08-01', '2020-08-29'
condition = (data['Date'] >= start_date) & (data['Date'] <= end_date)
august_data = data.loc[condition]
august_first_3_week_data = august_data[:-7]
print(august_first_3_week_data)

"""# AutoRegression

##Autoregression(3)
The following displays the MSE and MAPE prediction scores for each of the following features using AutoRegression(3)
"""

##### AutoRegression(3) for IA confirmed cases #####
handle = 'IA confirmed'

beta_coefficients = AutoRegression(3,august_first_3_week_data[handle])
print('Beta Coefficients : ' , beta_coefficients)
predicted_values = Predict_AR(august_first_3_week_data[handle],beta_coefficients)[-7:]
print(predicted_values, august_data[handle][-7:])


print('\nMSE : ' , MSE(predicted_values, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(predicted_values, august_data[handle][-7:] ))

##### AutoRegression(3) for IA deaths cases #####
handle = 'IA deaths'

beta_coefficients = AutoRegression(3,august_first_3_week_data[handle])
print('Beta Coefficients : ' , beta_coefficients)
predicted_values = Predict_AR(august_first_3_week_data[handle],beta_coefficients)[-7:]
print(predicted_values, august_data[handle][-7:])


print('\nMSE : ' , MSE(predicted_values, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(predicted_values, august_data[handle][-7:] ))

##### AutoRegression(3) for ID confirmed cases #####
handle = 'ID confirmed'

beta_coefficients = AutoRegression(3,august_first_3_week_data[handle])
print('Beta Coefficients : ' , beta_coefficients)
predicted_values = Predict_AR(august_first_3_week_data[handle],beta_coefficients)[-7:]
print(predicted_values, august_data[handle][-7:])


print('\nMSE : ' , MSE(predicted_values, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(predicted_values, august_data[handle][-7:] ))

##### AutoRegression(3) for ID deaths cases #####
handle = 'ID deaths'

beta_coefficients = AutoRegression(3,august_first_3_week_data[handle])
print('Beta Coefficients : ' , beta_coefficients)
predicted_values = Predict_AR(august_first_3_week_data[handle],beta_coefficients)[-7:]
print(predicted_values, august_data[handle][-7:])


print('\nMSE : ' , MSE(predicted_values, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(predicted_values, august_data[handle][-7:] ))

"""##Autoregression(5)
The following displays the MSE and MAPE prediction scores for each of the features using AutoRegression(5)
"""

##### AutoRegression(5) for IA confirmed cases #####
handle = 'IA confirmed'

beta_coefficients = AutoRegression(5,august_first_3_week_data[handle])
print('Beta Coefficients : ' , beta_coefficients)
predicted_values = Predict_AR(august_first_3_week_data[handle],beta_coefficients)[-7:]
print(predicted_values, august_data[handle][-7:])


print('\nMSE : ' , MSE(predicted_values, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(predicted_values, august_data[handle][-7:] ))

##### AutoRegression(5) for ID confirmed cases #####
handle = 'ID confirmed'

beta_coefficients = AutoRegression(5,august_first_3_week_data[handle])
print('Beta Coefficients : ' , beta_coefficients)
predicted_values = Predict_AR(august_first_3_week_data[handle],beta_coefficients)[-7:]
print(predicted_values, august_data[handle][-7:])


print('\nMSE : ' , MSE(predicted_values, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(predicted_values, august_data[handle][-7:] ))

##### AutoRegression(5) for IA deaths cases #####
handle = 'IA deaths'

beta_coefficients = AutoRegression(5,august_first_3_week_data[handle])
print('Beta Coefficients : ' , beta_coefficients)
predicted_values = Predict_AR(august_first_3_week_data[handle],beta_coefficients)[-7:]
print(predicted_values, august_data[handle][-7:])


print('\nMSE : ' , MSE(predicted_values, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(predicted_values, august_data[handle][-7:] ))

##### AutoRegression(5) for ID deaths cases #####
handle = 'ID deaths'

beta_coefficients = AutoRegression(5,august_first_3_week_data[handle])
print('Beta Coefficients : ' , beta_coefficients)
predicted_values = Predict_AR(august_first_3_week_data[handle],beta_coefficients)[-7:]
print(predicted_values, august_data[handle][-7:])


print('\nMSE : ' , MSE(predicted_values, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(predicted_values, august_data[handle][-7:] ))

"""#EWMA"""

def EWMA(alpha, Y):
    y_hat = 0.0
    Y = Y.to_numpy()
    for i in range(len(Y)-1):
        y_hat = (1-alpha)*(y_hat + Y[i])
    
    y_hat+= Y[-1]
    y_hat = y_hat*alpha
    
    return y_hat

def Predict_EWMA(alpha, Y, y_hat):
    Y = Y.to_numpy()
    pred_values = [y_hat]
    for i in range(1,7):
        y_hat = alpha*Y[i] + (1-alpha)*y_hat
        pred_values.append(y_hat)
    
    return pred_values

"""##EWMA (alpha =0.5)
The following displays the MSE and MAPE prediction scores for each of the following features using EWMA, with alpha=0.5
"""

##### EWMA(0.5) for IA confirmed cases #####
handle = 'IA confirmed'
alpha = 0.5

y_hat_t = EWMA(alpha,august_first_3_week_data[handle])
y_pred = Predict_EWMA(alpha,august_data[handle][-7:], y_hat_t)
print(y_pred, august_data[handle][-7:] )

print('\nMSE : ' , MSE(y_pred, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(y_pred, august_data[handle][-7:] ))

##### EWMA(0.5) for IA deaths cases #####
handle = 'IA deaths'
alpha = 0.5

y_hat_t = EWMA(alpha,august_first_3_week_data[handle])
y_pred = Predict_EWMA(alpha,august_data[handle][-7:], y_hat_t)
print(y_pred, august_data[handle][-7:] )

print('\nMSE : ' , MSE(y_pred, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(y_pred, august_data[handle][-7:] ))

##### EWMA(0.5) for ID confirmed cases #####
handle = 'ID confirmed'
alpha = 0.5

y_hat_t = EWMA(alpha,august_first_3_week_data[handle])
y_pred = Predict_EWMA(alpha,august_data[handle][-7:], y_hat_t)
print(y_pred, august_data[handle][-7:] )

print('\nMSE : ' , MSE(y_pred, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(y_pred, august_data[handle][-7:] ))

##### EWMA(0.5) for ID deaths cases #####
handle = 'ID deaths'
alpha = 0.5

y_hat_t = EWMA(alpha,august_first_3_week_data[handle])
y_pred = Predict_EWMA(alpha,august_data[handle][-7:], y_hat_t)
print(y_pred, august_data[handle][-7:] )

print('\nMSE : ' , MSE(y_pred, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(y_pred, august_data[handle][-7:] ))

"""##EWMA (alpha =0.8)
The following displays the MSE and MAPE prediction scores for each of the following features using EWMA, with alpha=0.8
"""

##### EWMA(0.8) for IA confirmed cases #####
handle = 'IA confirmed'
alpha = 0.8

y_hat_t = EWMA(alpha,august_first_3_week_data[handle])
y_pred = Predict_EWMA(alpha,august_data[handle][-7:], y_hat_t)
print(y_pred, august_data[handle][-7:] )

print('\nMSE : ' , MSE(y_pred, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(y_pred, august_data[handle][-7:] ))

##### EWMA(0.8) for IA deaths cases #####
handle = 'IA deaths'
alpha = 0.8

y_hat_t = EWMA(alpha,august_first_3_week_data[handle])
y_pred = Predict_EWMA(alpha,august_data[handle][-7:], y_hat_t)
print(y_pred, august_data[handle][-7:] )

print('\nMSE : ' , MSE(y_pred, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(y_pred, august_data[handle][-7:] ))

##### EWMA(0.8) for ID confirmed cases #####
handle = 'ID confirmed'
alpha = 0.8

y_hat_t = EWMA(alpha,august_first_3_week_data[handle])
y_pred = Predict_EWMA(alpha,august_data[handle][-7:], y_hat_t)
print(y_pred, august_data[handle][-7:] )

print('\nMSE : ' , MSE(y_pred, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(y_pred, august_data[handle][-7:] ))

##### EWMA(0.8) for ID deaths cases #####
handle = 'ID deaths'
alpha = 0.8

y_hat_t = EWMA(alpha,august_first_3_week_data[handle])
y_pred = Predict_EWMA(alpha,august_data[handle][-7:], y_hat_t)
print(y_pred, august_data[handle][-7:] )

print('\nMSE : ' , MSE(y_pred, august_data[handle][-7:] ))
print('\nMAPE : ', MAPE(y_pred, august_data[handle][-7:] ))